#!/bin/bash

# helper functions

tunn_check_op() {
	if [ "$TUNN_OP" != "$1" ]; then
		usage 1
	fi
}

tunn_read_impl() {
	# get list of tunnels
	readarray -t TUNN_LIST < "$TUNN_LISTFILE"
	export TUNN_LIST
}

tunn_update() {
	tunn_read_impl
	# clear list of tunnels
	: > "$TUNN_LISTFILE"
	# write open tunnels back into list
	for ((i=0; i < ${#TUNN_LIST[@]}; i++)); do
		tunn_entry $i
		if eval $TUNN_CMD -S "$TUNN_SOCKETNAME" -O check >&/dev/null; then
			echo "${TUNN_LIST[$i]}" >> "$TUNN_LISTFILE"
		else
			rm "$TUNN_SOCKETNAME" >&/dev/null
		fi
	done
	unset TUNN_LIST
}

tunn_read() {
	if [ -z "$TUNN_UNCLEAN" ]; then
		tunn_read_impl
		tunn_update
	fi
	tunn_read_impl
}

tunn_entry() {
	ENTRY="${TUNN_LIST[$1]}"
	IFS=' ' read -r -a ENTRY_ARR <<< "$ENTRY"

	# reconstruct command based on output format
	export TUNN_SOCKETNAME="${ENTRY_ARR[0]}"
	export TUNN_PORT="${ENTRY_ARR[1]}"
	# gets last N-2 words
	export TUNN_CMD="${ENTRY_ARR[*]: -$((${#ENTRY_ARR[@]}-2))}"
}

# operations

tunn_make() {
	TUNN_CMD="$@"
	if [ -z "$TUNN_CMD" ]; then
		usage 1
	fi

	# generate a random name for socket
	TUNN_SOCKETNUM=$(uuidgen)
	TUNN_SOCKETNAME="$TUNN_NAMEPRE"_"$TUNN_SOCKETNUM"

	# execute tunnel command
	eval $TUNN_CMD -N -D $TUNN_PORT -f -M -S "$TUNN_SOCKETNAME" 2>/dev/null
	TUNN_EXIT=$?

	# add to list of tunnels
	if [ $TUNN_EXIT -eq 0 ]; then
		echo "$TUNN_SOCKETNAME $TUNN_PORT $TUNN_CMD" >> "$TUNN_LISTFILE"
	else
		echo "Could not create tunnel (exit code $TUNN_EXIT)"
		exit $TUNN_EXIT
	fi
}

tunn_list() {
	if [ -n "$1" ]; then
		usage 1
	fi

	tunn_read
	if [ ${#TUNN_LIST[@]} -eq 0 ]; then
		return
	fi
	echo "index: socket port command"
	for ((i=0; i < ${#TUNN_LIST[@]}; i++)); do
		echo "$i: ${TUNN_LIST[$i]}"
	done
}

tunn_kill() {
	INDEX="$1"
	if [ -z "$INDEX" ]; then
		usage 1
	fi

	# get this tunnel
	tunn_read
	if [ $INDEX -lt ${#TUNN_LIST[@]} ]; then
		tunn_entry $INDEX
	else
		echo "Tunnel index $INDEX not found"
		exit 2
	fi

	# execute kill command
	eval $TUNN_CMD -S "$TUNN_SOCKETNAME" -O exit

	# update list
	sed -i "$((INDEX+1))"d "$TUNN_LISTFILE"
}

# defaults
TUNN_LISTFILE=~/.tunnlist
: ${TUNN_CONFIG:=~/.tunnconfig}
TUNN_USE_ALIASES=true
TUNN_SOCKETNAME=""
TUNN_CMD=""
TUNN_INDEX=""
TUNN_UNCLEAN=""

# get config defaults
if [ -e "$TUNN_CONFIG" ]; then
	source "$TUNN_CONFIG"
fi
: ${TUNN_NAMEPRE:=~/tsock}
UTMP=$(id -u)
UTMP=${UTMP:0-3}
: ${TUNN_PORT:=8${UTMP}}

usage() {
	ECHO="echo -e"
	$ECHO "tunn [operation] [options] [arguments]"
	$ECHO
	$ECHO "Default settings are obtained from the config file at ${TUNN_CONFIG}."
	$ECHO "To override the config file location, put this in your .bashrc or other login file:"
	$ECHO "\texport TUNN_CONFIG=/my/preferred/file"
	$ECHO "The available values are listed below and should be specified using bash syntax:"
	$ECHO "\tTUNN_NAMEPRE=~/tsock"
	$ECHO "\tTUNN_PORT=8XXX"
	$ECHO "(If TUNN_PORT is not specified in the config file or via the command line option,"
	$ECHO "the default value is taken from the last three digits of your UID.)"
	$ECHO
	$ECHO "Operations:"
	$ECHO
	$ECHO "make       \t make new tunnel"
	$ECHO "\t-n [name]   \t tunnel socket name prefix (default: ${TUNN_NAMEPRE})"
	$ECHO "\t-p [port]   \t tunnel port (default: $TUNN_PORT)"
	$ECHO "\t[command]   \t ssh command to run when making tunnel (required)"
	$ECHO
	$ECHO "list       \t list open tunnels"
	$ECHO
	$ECHO "kill       \t kill specified tunnel"
	$ECHO "\t[index]       \t index of tunnel (required)"
	$ECHO
	$ECHO "Common options:"
	$ECHO "-A          \t disable loading of aliases"
	$ECHO "-u          \t (unclean) do not auto-remove closed tunnels from list"
	$ECHO "-h          \t print this message and exit"
	exit $1
}

# get operation
TUNN_OP=$1
shift 1

TUNN_OPFN=""
case "$TUNN_OP" in
	make) TUNN_OPFN=tunn_make
	;;
	list) TUNN_OPFN=tunn_list
	;;
	kill) TUNN_OPFN=tunn_kill
	;;
	*) usage 1
	;;
esac

while getopts "An:p:uh" opt; do
	case "$opt" in
		A) TUNN_USE_ALIASES=""
		;;
		n) tunn_check_op make; TUNN_NAMEPRE="$OPTARG"
		;;
		p) tunn_check_op make; TUNN_PORT="$OPTARG"
		;;
		u) TUNN_UNCLEAN=true
		;;
		h) usage 0
		;;
	esac
done

# get ssh aliases
if [ -n "$TUNN_USE_ALIASES" ]; then
	shopt -s expand_aliases
	source ~/.bashrc
fi

# ensure list file exists
if [ ! -e "$TUNN_LISTFILE" ]; then
	touch "$TUNN_LISTFILE"
fi

# get args for operation (if any)
shift $(($OPTIND - 1))

# execute operation
$TUNN_OPFN "$@"
